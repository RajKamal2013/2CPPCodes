Searching

1. Given a sorted array, and a target, find the index of target in sorted array. <if first index, then iterate left till we find the data is equal to target >
    DIvide and Conquer

int
binarySearchHelper(vector<int> array, int start, int end, int target) {
    /* return criteria */
    bool  dbgLog = false;
    if (start <= end) {
        int mid = (start + end) / 2;
        if (array[mid] == target) {
            if (dbgLog) {
                cout << "found idx at " << mid << endl;
            }
            return mid;
        } else if (array[mid] > target) {  /* we go left */
            return binarySearchHelper(array, start, mid - 1, target);
        } else {   /* go right */
            return binarySearchHelper(array, mid + 1, end, target);
        }
    } else {
        return -1;
    }
}

/* return index in array where array[i]  == target */
int
binarySearch(vector<int> array, int target) {
    /* array is empty */
    if (array.size() == 0) {
        return -1;
    }

    /* just one element */
    if (array.size() == 1) {
        if (array[0] == target) {
            return 0;
        } else {
            return -1;
        }
    }

    if (array.size() == 2) {
        if (array[0] == target){
            return 0;
        } else if (array[1] == target) {
            return 1;
        } else {
            return -1;
        }
    }

    return binarySearchHelper(array, 0, array.size() - 1, target);
}


---------------------------------------------------------------------------
Find largest three number

Given an array of atleast 3 number, find the largest 3 number.

Input => {141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7}
Output=> {18, 141, 541}

Input => {10, 5, 9, 10, 12}
Output => {10, 10, 12}

-> keep three numbers to track, max1, max2, max3 while iterating the array

vector<int>
findThreeLargestNumbers(vector<int> array) {

    if (array.size() < 3) {
        return {};
    }

    int largest, secondLargest, thirdLargest;

    if (array[0] >= array[1]) {
        if (array[0] >= array[2]) {
            largest = array[0];
            secondLargest = array[2];
            thirdLargest = array[1];
        } else {
            largest = array[2];
            secondLargest = array[0];
            thirdLargest = array[1];
        }
    } else {
        if (array[1] >= array[2]) {
            largest = array[1];
            secondLargest = array[2];
            thirdLargest = array[0];
        } else {
            largest = array[2];
            secondLargest = array[1];
            thirdLargest = array[0];
        }
    }

    for (int i = 3; i <= array.size(); i++) {
        if (array[i] >= largest) {
            thirdLargest = secondLargest;
            secondLargest  = largest;
            largest = array[i]
         } else if ((array[i] < largest) && (array[i] >= secondLargest)) {
             thirdLargest = secondLargest;
             secondLargest = array[i];
         } else if ((array[i] < largest) && (array[i] < secondLargest) && (array[i] > thirdLargest)) {
             thirdLargest = array[i];
         } else {
             // do nothing;
         }
    }

    output.push_back(thirdLargest);
    output.push_back(secondLargest);
    output.push_back(largest);
    return output;
}


------------------------------------------------------------------------------------
Search For a Range

Input -> {0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}
Target -> 45

Output -> [4, 9]

using namespace std;
vector<int> searchForRangeInt(vector<int> array, int start, int end, int target) {
    if (start <= end) {
        int mid = (start + end )/2;
        if (array[mid] > target) {
            return searchForRangeInt(array, start, mid - 1, target);
        } else if (array[mid] < target) {
            return searchForRangeInt(array, mid + 1, end, target);
        } else {
            int ltIdx = mid;
            int rtIdx = mid;
            while (array[ltIdx] == target) {
                ltIdx = ltIdx - 1;
            }
            ltIdx = ltIdx + 1;

            while (array[rtIdx] == target) {
                rtIdx = rtIdx + 1;
            }
            rtIdx = rtIdx - 1;
            return {ltIdx, rtIdx};
        }
    } else {
        return {-1, -1};
    }
}

vector<int> searchForRange(vector<int> array, int target) {
 vector<int> output = {-1, -1};

  if (array.size() == 0) {
      return output;
  }

  if (array.size() == 1) {
      if (array[0] == target) {
          output = {0, 0};
          return output;
      } else {
          output = {-1, -1};
          return output;
      }
  }
  int start = 0;
  int end = array.size() - 1;
  output = searchForRangeInt(array, start, end, target);
  return output;
}



-------------------------------------------------------------------------------------------------------------------------
Shifted Binary Search


int shiftedBinarySearch(vector<int> array, int target) {

  return -1;
}

-> sorted array is rotated by k.

int binarySearch(vector<int> arr, int start, int end, int target) {
    if (start <= end) {
        int mid = (start + end)/2;
        if (arr[mid] > target) {
            return binarySearch(arr, start, mid - 1, target);
        } else if (arr[mid] < target) {
            return binarySearch(arr, mid + 1, end, target);
        } else {
            return mid;
        }
    } else {
        return -1;
    }
}

int shiftedBinarySearch(vector<int> array, int target) {
	if (array.size() == 0) {
		return -1;
	}
	if (array.size() == 1) {
		if (array[0] == target) {
			return 0;
		} else {
			return -1;
		}
	}

  int idx = 0;
  int prev = array[idx];
  int pos = -1;
  for (idx = 1; idx  < array.size(); idx++) {
        if (array[idx] < prev) {break;}
  }
  pos = binarySearch(array, 0, idx-1, target);
  if (pos != -1) {
      return pos;
  }

  pos = binarySearch(array, idx, array.size() - 1, target);
  if (pos != -1) {
      return pos;
  }
  return -1;
}

-----------------------------------------------------------------------------------------------
/*
Search in Sorted Matrix

Matrix -> row and column wise sorted. I need to find a number if it exists.

    1,  4,    7,   12,  15, 1000
    2,  5,    19,  31,  32, 1001
    3,  8,    24,  33,  35, 1002
    40, 41,   42,  44,  45, 1003
    99, 100, 103, 106, 128, 1004

    Target -> 44
    answer -> {3 ,3}

    Diagonally > top right

    start with top right
        if target < mat[r][c]
            we will come to left (col = col - 1)
        if target > mat[r][c]
            we will go down (row = row + 1)
        else
            we found the value
*/

vector<int> searchInSortedMatrix(vector<vector<int>> mat, int target) {
    if (mat.size() == 0) {
        return {-1, -1};
    }
// get row and column size
    int rSize = mat.size();
    int cSize = mat[0].size();

// set up start and end index
    int rowEnd = rSize - 1;
    int rowStart = 0;
    int colStart = 0;
    int colEnd = cSize - 1;

// set up iterators
    int r = rowStart;
    int c = colEnd;
    bool found = false;

// output
    vector<int> outputIndices(2);

    while ((!found) && (r >= rowStart) && (r <= rowEnd) && (c >= colStart) && (c <= colEnd)) {
        if (target > mat[r][c]) { // we will go down
            r = r + 1;
        } else if (target < mat[r][c]) { // we will go left
            c = c - 1;
        } else { // we found the value
            found = true;
            outputIndices[0] = r;
            outputIndices[1] = c;
        }
    }

    if (!found) {
        outputIndices[0] = -1;
        outputIndices[1] = -1;
    }

    return outputIndices;
}

void test_searchInSortedMatrix() {
    vector<vector<int>> matrix;
    int target;
    vector<int> targetIndices = {};

    matrix = {{1, 4, 7, 12, 15, 1000},
              {2, 5, 19, 31, 32, 1001},
              {3, 8, 24, 33, 35, 1002},
              {40, 41, 42, 44, 45, 1003},
              {99, 100, 103, 106, 128, 1004 }
            };
    cout << "Input Matrix :" << endl;
    for (auto row : matrix) {
        for (auto col:row) {
            cout << setw(4) << col << " ";
        }
        cout << endl;
    }
    target = 44;
    targetIndices  = searchInSortedMatrix(matrix, target);
    cout << "Indices for target :" << target << " in matrix are :";
    for (auto idx:targetIndices) {
        cout << idx << " ";
    }
    cout << endl;


    matrix = {{1, 4, 7, 12, 15, 1000},
              {2, 5, 19, 31, 32, 1001},
              {3, 8, 24, 33, 35, 1002},
              {40, 41, 42, 44, 45, 1003},
              {99, 100, 103, 106, 128, 1004 }
    };
    cout << "Input Matrix :" << endl;
    for (auto row : matrix) {
        for (auto col:row) {
            cout << setw(4) << col << " ";
        }
        cout << endl;
    }
    target = 100;
    targetIndices  = searchInSortedMatrix(matrix, target);
    cout << "Indices for target :" << target << " in matrix are :";
    for (auto idx:targetIndices) {
        cout << idx << " ";
    }
    cout << endl;


    matrix = {{1, 4, 7, 12, 15, 1000},
              {2, 5, 19, 31, 32, 1001},
              {3, 8, 24, 33, 35, 1002},
              {40, 41, 42, 44, 45, 1003},
              {99, 100, 103, 106, 128, 1004 }
    };
    cout << "Input Matrix :" << endl;
    for (auto row : matrix) {
        for (auto col:row) {
            cout << setw(4) << col << " ";
        }
        cout << endl;
    }
    target = 101;
    targetIndices  = searchInSortedMatrix(matrix, target);
    cout << "Indices for target :" << target << " in matrix are :";
    for (auto idx:targetIndices) {
        cout << idx << " ";
    }
    cout << endl;
}11