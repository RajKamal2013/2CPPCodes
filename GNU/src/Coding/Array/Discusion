Coding Practice


13. First Duplicate Value
Input  -> An array of integer between 1 and n,n -> length of array
Output -> First integer that has multiple occurance.

Example->
Input  -> [2, 1, 5, 2, 3, 3, 4]
Output -> 2

n ->
array[0] => 2
array[1] => 1  --> -1
array[2] => 5  --> -5 * -1  --> min = 2..
array[3] => 2  --> -2           min = 3
array[4] => 3
array[5] => 3
array[6] => 4

Optimal ->
    Time Complexity -> O(N)
    Space Complexity -> O(1)


#include <vector>
using namespace std;

int
firstDuplicateValue(vector<int> array)
{
    return -1;
}


2 1 5 2 3 3 4 ->
1 0 4 1 2 2 3 ->
Indexing
-1 0 -4 -1 -2 -2 -3

--------------------------------

1. Two Sum

Input <- array and number is given
Output <- two number in array whose sum is number

Input >- [3, 5, -4, 8, 11, 1, -1, 6], 10
Output <- [-1, 11]

Logic -> Base Case + Sort + two Pointer Technique
Time  -> O(nlogn ) + o(n)

vector<int> twoNumberSum(vector<int> array, int targetSum)
{
	/* base cases */
    if (array.size() < 2) {
        return {};
    }

    if (array.size() == 2) {
        if ((array[0] + array[1]) == targetSum) {
            return array;
        } else {
            return {};
        }
    }

    /* sort the array */
    sort(array.begin(), array.end());

    /* iterate the array and find the sum < use the two pointer technique */
    int sum = 0;
    int left, right;
    left = 0;
    right = array.size() - 1;

    while (left < right) {
        sum = array[left] + array[right];
        if (sum == targetSum) {
            vector <int> arr;
            arr.push_back(array[left]);
            arr.push_back(array[right]);
            return arr;
            break;
        } else if (sum > targetSum) {
            right = right - 1;
        } else {
            left = left + 1;
        }
    }

    return {};

}


find the trend stopper (increasing/decreasing)
next find our number from start/end from trend stopper
now find min/max from first and last
---------------------------------------------------------------------------------------

2. Three Sum

Input <- array and number is given
Output <- All triplets in array whose sum is number

Input <- [12, 3, 1, 2, -6, 5, -8, 6 ], 0
Output <- [[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]]

Trick <- Sort + for every element in array use Two Pointer Tech

Time <- O(nlogn) + n*O(n)  -> O(n^2)

Algo
1. sort
2. For every element, see there there exist 2 pair whose sum is satisfies. We will convert the problem to 2 sum problem.

vector<vector<int>> threeNumberSum(vector<int> array, int targetSum) {
	 vector<vector<int>> arr;
    int sum = targetSum;
    int left, right;
    int twoSum = 0;

    if (array.size() < 2) {
        return {};
    }

    /* base case */
    if (array.size() == 3) {
        if ((array[0] + array[1] + array[2]) == targetSum) {
            arr.push_back(array);
            return arr;
        } else {
            return {};
        }
    }
    /* algorithm start */
    sort(array.begin(), array.end());

    for (int idx = 0; idx < array.size(); idx++) {
        sum = targetSum - array[idx];
        left = idx + 1;
        right = array.size() - 1;

        while (left < right) {
            twoSum = array[left] + array[right];
            if (twoSum == sum) {
                vector<int> vec;
                vec.push_back(array[idx]);
                vec.push_back(array[left]);
                vec.push_back(array[right]);
                arr.push_back(vec);
							  left = left + 1;
            } else if (twoSum > sum) {
                right = right - 1;
            } else {
                left = left + 1;
            }
        }
    }
    return arr;
}

-----------------------------------------------------------------
3. Validate Subsequence

Given array arr1 and arr2 and find whether arr2 is valid subsequence of arr1.
arr1 -> 5, 1, 22, 25, 6, -1, 8, 10
arr2 -> 1, 6, -1, 10

--> answer -> True

arr1 -> 1, 2, 3, 4
arr2 -> 1, 3, 4
-- > answer -> True

arr1 -> 1, 2, 3, 4
arr2 -> 2, 4
Answer -> True


algorithm ->
use the two indices on each array to iterate. idx1 -> arr1, idx2 -> arr2
iterate through arr1 and when arr1[idx1] == arr2[idx2], then idx2++. If at the end of iteration
idx2 =  arr2.size(), valid subsequence ow not.

Time > O(n), where n is size of array1.
idx1 -> 0
idx2 -> 1
bool isValidSubsequence(vector<int> array, vector<int> sequence) {
	int idx1, idx2;
    idx1 = idx2 = 0;

    while (idx1 < array.size()) {
        if (array[idx1] == sequence[idx2]) {
            idx2++;
            if (idx2 == sequence.size()) {
                return true;
            }
        }
        idx1++;
    }
    return false;
}

--------------------------------------------------------------------------
4. Sorted Squared Array

given an sorted array and then output array which is squared of elements in input array and is sorted too.

Input  -> [1, 2, 3, 4, 5]
Output -> [1, 4, 9, 16, 25]
Caution => it can have negative integer!!

-> non negative index   -> p_idx
-> negative index       -> n_idx

find the non negative idx -> p_idx
merge the square  of data in indices (0 to n_idx) of array to square of data in indices (p_idx to array.size()) of array.

Time -> O(n)


vector<int> sortedSquaredArray(vector<int> array) {
 vector<int> ret;
    int n_idx, idx;

    if (array.size() == 0) {
        return {};
    }

    idx = 0;
    n_idx = -1;

    /* Find n _idx */
    while (array[idx] < 0) {
        n_idx  = idx;
        idx++;
    }

    /* all are positive */
    if (n_idx == -1) {
        for (idx = 0; idx < array.size(); idx++) {
            ret.push_back(array[idx] * array[idx]);
        }
    } else {  /* some negative and some positive */
        int p_idx = n_idx + 1;
        int id1, id2, val1, val2;
        id1 = n_idx;
        id2 = p_idx;

        /* Merge */
        while (id1 >= 0 && id2 < array.size()) {
            val1 = array[id1] * array[id1];
            val2 = array[id2] * array[id2];
            if (val1 > val2) {
                ret.push_back(val2);
                id2++;
            } else {
                ret.push_back(val1);
                id1--;
            }
        }

        while (id1 >= 0) {
            val1 = array[id1] * array[id1];
            ret.push_back(val1);
            id1--;
        }

        while (id2 < array.size()) {
            val2 = array[id2] * array[id2];
            ret.push_back(val2);
            id2++;
        }
    }
    return ret;
}

------------------------------------------------------------------
5. Tournament Winner

Input  -> [(x1, x2), (x2, x3), (x3, x4)]
       -> [0, 0, 1]

(x1, x2) -> x2 wins (0 -> away team, 1 -> home team) res -> 0 (x1 -> home, x2 -> away)
(x2, x3) -> x3 wins (0 -> away team, 1 -> home team) res -> 0 (x2 -> home, x3 -> away)
(x3, x4) -> x3 wins (0 -> away team, 1 -> home team) res -> 1 (x3 -> home, x4 -> away)

Each win -> 3 points
Each loss -> 0 points

(x1, x2, x3, x4)
x1 -> 0 -> fist game
x2 -> 3 -> fist game
x3 -> 6 -> second game and third game
x4 -> 0 -> third game

Winner -> x3

map (team, points) -> for each winner, find if team exist in map if exist then remove and add with extra 3 ow just add the team with 3 point. At the end fnd the max of map

Code -> (java )

ArrayList<ArrayList<String>> competitions, ArrayList<Integer> results) {
    HashMap<String, Integer> res = new HashMap<>();
    String winner;
    int idx;
    /* Iterate the array and set up map */
    for (int i = 0; i < results.size(); i++) {
        if (results.get(i) == 1) {
            idx = 0;
        } else {
            idx = 1;
        }
        winner = competitions.get(i).get(idx);
        if (res.containsKey(winner)) {
            res.put(winner, res.get(winner) + 3);
        } else {
            res.put(winner, 3);
        }
    }

    /* Find max in the map */
    int max = -1;
    winner = "";
    for (Map.Entry<String, Integer> set : res.entrySet()) {
        if (set.getValue() > max) {
            max = set.getValue();
            winner = set.getKey();
        }
    }

    return winner;

--------------------------------------------------------------------------
6. Smallest Difference
Input  -> two integer arrays
Output -> pair of integer, <one from array 1 and another from array 2> such that absolute difference is closest to 0.

Input ->
arrayOne -> [-1, 5, 10, 20, 28, 3]
arrayTwo -> [26, 134, 135, 15, 17]

Output -> [28, 26]


idea ->
1. sort both the array
2. idx1 <- index to track movement in array1
3. idx2 <- index to track movement in array2
4. idx1 = idx2 = 0
5. calculate diff <- abs(array1[idx1] - array2[idx2])
6. now start advancing indices, keeping track of differences, based on who ever is smallest.
7. after iterating both the array, output the smallest difference

Time Complexity -> O(nlogn) + O(mlogm) + o(m) + o(n)

if m<n then -> O(nlogn) + o(n)
else -> O(mlogm) + O(m)

space complecity => O(1)

Code ->
vector<int> smallestDifference(vector<int> arrayOne, vector<int> arrayTwo) {
	sort(arrayOne.begin(), arrayOne.end());
    sort(arrayTwo.begin(), arrayTwo.end());

    int idx1 = 0;
    int idx2 = 0;
    int data1, data2;

    int minDiff = INT32_MAX;
    data1 = arrayOne[idx1];
    data2 = arrayTwo[idx2];
    int diff;

    while ((idx1 < arrayOne.size()) && (idx2 < arrayTwo.size())) {
        diff = abs(arrayOne[idx1] - arrayTwo[idx2]);
        if (minDiff > diff) {
            minDiff = diff;
            data1 = arrayOne[idx1];
            data2 = arrayTwo[idx2];
        }

        if (arrayOne[idx1] > arrayTwo[idx2]) {
            idx2++;
        } else {
            idx1++;
        }
    }

    while (idx1 < arrayOne.size()) {
        diff = abs(arrayOne[idx1] - arrayTwo[idx2 - 1]);
        if (minDiff > diff) {
            minDiff = diff;
            data1 = arrayOne[idx1];
            data2 = arrayTwo[idx2 - 1];
        }
        idx1++;
    }

    while (idx2 < arrayTwo.size()) {
        diff = abs(arrayOne[idx1 - 1] - arrayTwo[idx2]);
        if (minDiff > diff) {
            minDiff = diff;
            data1 = arrayOne[idx1 - 1];
            data2 = arrayTwo[idx2];
        }
        idx2++;
    }

    vector<int> res;
    res.push_back(data1);
    res.push_back(data2);
    return res;
}

---------------------------------------------------------------------------------------------------------
7. Move Element to End

Input -> array<a1> and a number <num>.
Ouput -> array<a1> where all the instances of number <num> is moved to the end inplace.

Input ->
    array  -> [ 2, 1, 2, 2, 2, 3, 4, 2 ]
    toMove -> 2
Output ->
    array  -> [ 1, 3, 4, 2, 2, 2, 2, 2 ]

Idea ->
1. Quick sort idea. Keep two idx and iterate the array with one idx and another idx to keep track of next occurance of number.


idx1 -> array.size() - 1
idx2 -> 0

idx1 -> move to left till array[idx] == toMove
idx2 -> move to right till array[idx] == toMove

Now idx advance idx2 if the array[idx2] == toMove, swap (array[idx1], array[idx2]) and idx2--


Time complexity -> O(n)
space Complexity -> O(1) -> Constant

Code -->

vector<int> moveElementToEnd(vector<int> array, int toMove) {
	if (array.size() == 0) {
        return {};
    }
    int left, right, val, temp;

    right = array.size() - 1;
    left = 0;
    val = toMove;

    while (array[right] == val) {
        right = right - 1;
    }

	while (left < right) {
		if (array[left]  == val) {
			temp = array[right];
			array[right] = array[left];
			array[left] = temp;
			while (array[right] == val) {
				right = right - 1;
			}
		}
		left = left + 1;
	}
    return array;

}

---------------------------------------------------------------------------------
8. Monotonic Array

Given an array, tell if its monotonic.

very very easy !!!




---------------------------------------------
9. spiral index

usage => photography
M <- row_size
N <- column_size
mat[M][N]
using namespace std;

vector<int> spiralTraverse(vector<vector<int>> array) {
int M = array.size();
int N = array[0].size();
vector<int> res;
bool isDone = false
int idx, column_start, column_end, row_start, row_end;
column_start = 0
column_end = sizeof(N);
row_start = 0
row_end = sizeof(M);


if ((M == 1) && (N == 1)) {
    res.push_back(mat[0]]0]);
    isDone = true
    return res;
}

if (M == 1) {
    for (idx = 0; idx < N; idx++) {
        res.push_back(mat[0][idx]);
        isDone =true;
    }
    return;
}

if (N == 1) {
    for (idx = 0; idx < M; idx++) {
        res.push_back(mat[idx][0]);
        isDone = true;
    }
    return;
}
spiral_idx = 0;
while (!isDone) {
    for (spiral_idx = 0; spiral_idx < 4; spiral_idx++) {
    if (spiral_idx == 0) {
        for (idx = column_start; idx < column_end; idx++) {
             res.push_back(mat[row_start][idx]);
        }
        row_start = row_start + 1;
        if (row_start >  row_end)
            isDOne = 1
            break;
    }  else if (spiral_idx == 1) {
            for (idx = row_start; idx  > row_end; idx++) {
                res.push_back(mat[idx][column_end]);
            }
            column_end = column_end - 1;
            if (col_start > col_end) {
                isDone = 1
                break;
            }
    } else if (spiral_idx == 2) {
            for (idx = column_end; idx >= column_start ; idx-- ) {
                res.push_back(mat[row_end][idx]);
            }
            row_end = row_end - 1;
            if (row_start > row_end) {
                isDone = 1
                break;
            }
    } else if (spiral_idx == 3 ){
            for (idx = row_end; idx >= row_start; idx--) {
                res.push_back(mat[idx][column_start]);
            }
            column_start = column_start + 1;
            if (col_start > col_end) {
                isDone = 1;
                break;
            }
    } else {

    }
    }
    if (row_start  == row_end) && (col_start == col_end) {
        res.pus_back(mat[row_start][col_start]);
        isDone = true;
    } else id ((column_start > column_end ) || (row_start > row_end)){
        isDone = true;
    } else {
        continue;
    }

    if (isDone) {
        return res;
    } else {
        return {};
    }

}
}

              1  2   3   4  --> RowS + 1
   ColS + 1 - 12 13  14  5
              11 16  15  6
   RowE -1  - 10 9   8   7
                         |
                         colE - 1
 1 2 3  ->
 8 9 4
 7 6 5

 1  2
 6  3
 5  4  --> row = 1  col = 0

 1 2 3
 6 5 4  -> row 1 column 1

 1 2 3 4 5  6 7 8 9 10 11 12 13 14 15 16
{
{1   2  3  4 }
{10 11 12  5 }   row ->
{9   8  7  6 }
}
ColS -> 1
colE -> 2


[1,   2,  3, 4],
[10, 11, 12, 5],
[9,   8,  7, 6]



----------------------------------------------------------------------------
10. peak -> finding peak

Adjacent integer that are strictly increasing and then strictly decresing after a point. -> this sequence is peak

usage -> stock market

1 4 10 2 -< peak

4, 0, 2 -> no peak -> decreasing and then increasing

1 2 2 0  -> no peak -> increasing constant and then decreasing
1, 2, 3 -> no peak -> strictly increasing not decresing


[1 2 3 3 4 0  10 6 5 -1 -3 2 3] -> peak (0, 10 6, 5, -1, -3,)

--> idea
it has be to increasing first and then decreasing
so iterate through all and find the most highest number and then decreasing.

left top right ->


max = -1;
left = right = top = -1
count ->
curr
prev
prev = array[0];
vector -> res, temp
bool isPeak = false

top = right = left = -1

if ((array.size() == 0) || (array.size() == 1) || (array.size() == 2)) {
        isPeak = false;
        return 0;
    }

for (idx = 1; idx < array.size; idx++) {
    if (array[idx] > array[prev]) {
        if (left === -1) {
            left = prev;
            temp <- array[left], array[idx]
            count = 2;
        } else {
            if (isPeak) {
                max = count;
                res.clear();
                res <- temp;
                right =  top = -1;
                temp.clear();
            }
            left = prev;
            right = top = -1;
            isPeak = false;
            temp.clear();
            temp <- array[prev]
            temp <- array[idx]
            count = 2;
        } else {
            count++;
            temp<- array[idx];
        }
        prev = idx;
    } else if (array[idx] < array[prev]) {
        if (left != -1) {
            if (top == -1) {
                top = prev;
                right = idx;
                isPeak = true;
            } else {
                right = idx;
            }
            temp<- array[idx];
            count++;
        }
    } else {
        if ((right != -1) && (top != -1) && (left != -1)) {
            count = right - left + 1;
            if (max < count) {
                max = count;
                res.clear();
                res = temp;
                temp.clear();
            }
            isPeak = false;
        }
        left = right =  top = -1;
    }

    if (isPeak) {
        count = right - left + 1;
        if (max < count) {
            max = count;
            res.clear();
            res = temp;
            temp.clear();
        }
    }

    if (max != -1) {
        return max;
    } else {
        return 0;
    }
}

-------------------------------------------------------------------------------------
11. Non Constructible Change.



-------------------------------------------------------------------------------------
12 Product of Array

Input  <- array
Output <- array where each index is replaced by product of every other element other than idx

Input  <-  5, 1, 4, 2
Output <- 8, 40, 10, 20

/*
Note >- you can't use devide
*/

Input  -> x
Output -> X

Input Array => x1, x2, x3, x4, x5

X1 -> <x2, x3, x4, x5>

X -> <x2*x3*x4*x5, x1*x3*x4*x5, x1*x2*x4*x5, x1*x2*x3*x5, x1*x2*x3*x4>


P -> x1 * x2 * x3 * x4 * x5


LeftP  -> [x1,             x1*x2,        x1*x2*x3,  x1*x2*x3*x4,        x1*x2*x3*x4*x5 ]

RightP -> [x1*x2*x3*x4*x5, x2*x3*x4*x5,  x3*x4*x5,  x4*x5,              x5            ]

LIdx -> 0
Ridx -> RightP.size() - 1

Lidx(i) = (i - 1)
Ridx(i) = (i + 1)


if (Lidx < 0 )  then LeftP[Lidx] = 1
if (Ridx > RightP.size()) then RightP[RIdx] = 1


X<i> = LeftP(Lidx(i)) * Right(Ridx(i))




Time Complexity => O(n)
Space Complexity => O(n)


Base Case ->
0 element => empty
1 element => nothing to be done
2 element => just swap




Code ->

int
LIdx(int idx) {
    return (idx - 1);
}

int
RIdx(int idx) {
    return (idx + 1);
}

int LeftP(const vector<int> &LeftP, int idx) {
    if (idx < 0) {
        return 1;
    } else {
        return LeftP[idx  - 1];
    }
}

int RightP(const vector<int> &RightP, int idx) {
    if (idx < 0) {
        return 1;
    } else {
        return RightP[idx  - 1];
    }
}

vector<int>
ArrayProduct(vector<int> array)
{
 vector<int> res;
 vector<int> LeftP;
 vector<int> RightP;
 int product;

 if (array.size() == 0) {
     return {};
 }

 if (array.size() == 1) {
     return {};
 }

 if (array.size() == 2) {
     res.push_back(array[1]);
     res.push_back(array[0]);
     return res;
 }

 for (int idx = 0; idx < array.size(); idx++) {
    product = LeftP(LIdx(idx)) * RightP(RIdx(idx));
    res.push_back(product);
 }

 return res;

}

------------------------------------------------------------------------------------------------
13. SubArray Sort
Given an array, find the subarray that needs to be sorted to get the whole array sorted.
Subarray => [least_index, highest_index]

Input > [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]

Output -> [3, 9]
3rd index -> 7
9th index -> 7


Start Index
1. iterate and find where started decreasing suddenly . That index -> S2
2. Now starting from 0 find the S1 such that array[S1] > array[S2].
3. Find minimum that is less than array[S1]
    min = array[S1];
    min <- minimum(array, S1 + 1,  array.size() - 1, min);
    if (min != array[S1]) {
        for (idx = 0; idx <= S1; idx++) {
            if (array[idx] > min) {
                S1 = idx;
                break;
            }
        }
    }

End Index
1. Iterate from end and find where it started increasing. That index -> E2
2. Now iterate from E2 towards end and find the last index E1 such that E2 > E1
3. Find Maximum that is more than the array[E1].
    max = array[E1];
    max <- maximum(array, E1 - 1, 0, max);
    if (max != array[E1]) {
        for (idx = array.size() - 1; idx >= E1; idx--) {
            if (array[idx] < max) {
                E1 = idx;
                break;
            }
        }
    }



2 , 1 ->

O(N)


vector<int>
subarraySort(vector<int> array)
{
 int idx;
    bool test = true;

    /*****************************************Input ************************************************/

    if (test) {
        cout << "Input: ";
        cout << "[";
        for (auto &data:array) {
            cout << data << " ";
        }
        cout << "]" << endl;
    }

    /****************************************** Find the start index *******************************/
    int S1, S2, prev;
    prev = array[0];
    S1 = S2= -1;

    for (idx = 1; idx < array.size(); idx++) {
        if (array[idx] < prev) {
            S2 = idx;
            break;
        }
        prev = array[idx];
    }
   /* Find greater number than S2 */
    if (S2 != -1) {
        for (idx = 0; idx < S2; idx++) {
            if (array[idx] > array[S2]) {
                S1 = idx;
                break;
            }
        }
    }

    int min;
    if (S1 != -1) {
        min = array[S1];
        for (idx = S1 + 1; idx < array.size() - 1; idx++) {
            if (min > array[idx]) {
                min = array[idx];
            }
        }
        if (min != array[S1]) {
            for (idx = 0; idx <= S1; idx++) {
                if (array[idx] > min) {
                    S1 = idx;
                    break;
                }
            }
        }
    }

    if (test) {
        cout << "Starting index :" <<  S1 << endl;
    }


    /************************************** Find the End Index *************************************/
    int E1, E2;
    E1 = E2 = -1;
    prev = array[array.size() -1];
    /* Find number such that prev is smaller than current */
    for (idx = array.size()-1; idx >= 0; idx--) {
        if (prev < array[idx]) {
            E2 = idx;
            break;
        }
        prev = array[idx];
    }

    if (E2 != -1) {
        /* find number E1 from last such that , Array[E1] is smaller than array[E2] */
        for (idx = E2 + 1; idx < array.size(); idx++) {
            if (array[idx] < array[E2]) {
                E1 = idx;
            }
        }
    }

    int max;
    if (E1 != -1) {
        max = array[E1];
        for (idx = E1 - 1; idx >= 0; idx--) {
            if (max > array[idx]) {
                max = array[idx];
            }
        }
        if (max != array[E1]) {
            for (idx = array.size() - 1; idx >= E1; idx--) {
                if (array[idx] < max) {
                    E1 = idx;
                    break;
                }
            }
        }
    }


    if (test) {
        cout << "Ending index :" <<  E1 << endl;
    }



    vector<int> subarray;
    subarray.push_back(S1);
    subarray.push_back(E1);

    /*****************************************Output************************************************/


    if (test) {
        cout << "Output: ";
        cout << "[";
        for (auto &data:subarray) {
            cout << data << " ";
        }
        cout << "]" << endl;
    }


    return subarray;
}

find minimum ->
find maximum ->

find the index

1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 -> 3, 10
1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 -> 3, 9
2, 1
1, 2, 4, 7, 10, 11, 7, 12, 7, 7, 16, 18, 19  -> 4,9   -->

1, 2, 4, 7, 10, 11, 7, 12, 13, 14, 16, 18, 19 -> 4, 6

2, 1 --> 0, 1
S2 = 1

2, 1, 1 => 0, 2

4, 8, 7, 12, 11, 9, -1, 3, 9, 16, -15, 51, 7 -> 0, 12

-41, 8, 7, 12, 11, 9, -1, 3, 9, 16, -15, 51, 7 -> 1, 12

1, 2, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1 -> 2, 19
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2 -> 2, 19
1, 2, 8, 4, 5 --->


14. Largest Range  -> could not Do ...
Find the largest range in array of integers.
Range between 0 to n means, the number 0, 1, 2, ...n are to be present in any order.
Need to find largest Range

[2,6] -> [2, 3, 4, 5, 6]

Input ->
array -> [1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]

11:30 AM

Output ->
[0, 7]

1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6
L => 15

------------------ my algo
vector<int> start -> 3, 4
vector<int> end -> 9

vecto<int> dup ->
()
0  -> 0 -> 15 ->  min ()
1  -> 1 -> idx ->
2  -> 2
3  -> 3
4  -> 4
5  -> 5
6  -> 6
7  -> 7  -> max()
8
9
10  -> 10
11  -> 11
12  -> 12 -> max()
13
14
15

Hash[i] -> array[i] % Length(array)
I just need range ->
start and ending  ->



--------------------------------------------------------------



map <number, boolean> - visit



Time -> O(N)
Space -> O(N)

-->  Min ->
     Max ->

Hint -> use map

Idea ->
1. create map<num, true>
2. insert the items and set true against the visited ones
for idx:array {
    map.insert(idx, true);
}
3. iterate again to see the largest
    vector <int> range.
    int Gcount;
    for idx:array {
        if (!map[idx]) {
            continue;
        }
    currLen = 1;
    map[idx] = false;
    left = idx - 1;
    right = idx + 1;
    while (map.find(left) != map.end()) {
        map[left] = false;
        left = left - 1;
        currLen = currLen + 1;
    }
    while (map.find(right) != map.end()) {
        map[right] = false;
        right = right + 1;
        currLen = currLen + 1;
    }

    if (currLen > LongestLen) {
        LongestLen = currLen;
        LongestRange = {left + 1, right - 1};
    }

    return LongestRange;
}


vector<int> largestRange(vector<int> array) {
{
  if ((array.size() == 0) && (array.size() == 1)){
    return {};
  }

  vector<int> LargestRange;
  int LargestLen;
  int CurrLen;
  int left, right;
  /* Hash is to create map of integer present in array */
  unordered_map<int, bool> hash;

  /* create hash for each integer, hash says the integer is visisted */
  for (int &data : array) {
      map[data] = true;
  }

  for (int &data:array {
    if (!hash[data]) {
        continue;
    }
    /* we found number that is present in array */
    CurrLen = 1;
    hash[idx] = false;
    left = data - 1;
    right = data + 1;

    /* count the elements to its left */
    while (hash.find(left) != hash.end()) {
        hash[left] = false;
        left = left - 1;
        currLen = currLen + 1;
    }

    /* count the elements to its right */
    while (hash.find(right) != hash.end()) {
        hash[right] = false;
        right = right + 1;
        currLen = currLen + 1;
    }

    if (currLen > LargestLen) {
        LargesttLen = currLen;
        LargestRange = {left + 1, right - 1};
    }

    return LargestRange;
  }

}

-------------------------------------------------------------------------------

16. Zigzag Traversal

 {
  {1, 3, 4, 10},
  {2, 5, 9, 11},
  {6, 8, 12, 15},
  {7, 13, 14, 16}
  }

zigzag starts at top left corner of 2D array, goes down by one element and proceed in zigzag manner all the way to bottom right.
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

D UDiag R DDaig D UDiag D Diag R UDiag D

ector<int>
zigzagTraverse(vector<vector<int>> mat) {

    bool test = false;
    /* Globals */
    int DOWN   = 0;
    int UDiag  = 1;
    int RIGHT  = 2;
    int DDiag  = 3;

    int count= 0;
    int currPos = 0;
    int M, N, TotalElement;
    int row, column;
    int i, j;

    /* row size */
    M = mat.size();
    /* Column Size */
    N = mat[0].size();
    /* Total number of elements in matrix */
    TotalElement = M * N;

    row = column = 0;
    /* result */
    vector<int> res;

    /*  Row vector */
    if (M == 1) {
        j = 0;
        while (j < N) {
            res.push_back(mat[0][j]);
            j = j + 1;
        }
        return res;
    }

    /* Column Vector */
    if (N == 1) {
        i = 0;
        while (i < M) {
            res.push_back(mat[i][0]);
            i = i + 1;
        }
        return res;
    }

    i = j = 0;
    if (test) {
        cout << "Start:" << i << " " << j << endl;
    }

    /* Zig Zag */
    res.push_back(mat[i][j]);
    count = count + 1;
    while ((count != TotalElement))
    {
        if (test) {
            cout << "Count:" << count << " i:" << i << "j:" << j << " CurPos:" << currPos << endl;
            PrintArray(res);
        }
        if (currPos == DOWN) {
            if (i + 1 >= M) {
                if (j + 1 < N) {
                    j = j + 1;
                    if (test) {
                        cout << "Down1:" << i << " " << j << endl;
                    }
                    res.push_back(mat[i][j]);
                    count++;
                }
                currPos = UDiag;
            } else {
                i  =  i + 1;
                if (test) {
                    cout << "Down2:" << i << " " << j << endl;
                }
                res.push_back(mat[i][j]);
                count++;
                currPos = UDiag;
            }
        } else if (currPos == UDiag) {
            while (((i - 1) >= 0) && (j + 1 < N)) {
                i = i - 1;
                j = j  + 1;
                if (test) {
                    cout << "Udiag:" << i << " " << j << endl;
                }
                res.push_back(mat[i][j]);
                count++;
            }
            currPos = RIGHT;
        } else if (currPos == RIGHT) {
            if (j + 1 >= N) {
                if (i + 1 < M) {
                    i = i + 1;
                    if (test) {
                        cout << "RIGHT1:" << i << " " << j << endl;
                    }
                    res.push_back(mat[i][j]);
                    count++;
                }
                currPos = DDiag;
            } else {
                j = j + 1;
                if (test) {
                    cout << "RIGHT2:" << i << " " << j << endl;
                }
                res.push_back(mat[i][j]);
                count++;
                currPos = DDiag;
            }
        } else if (currPos == DDiag) {
            while (((i + 1) < M) && ((j - 1) >= 0)) {
                i = i  + 1;
                j = j - 1;
                if (test) {
                    cout << "DDiag:" << i << " " << j << endl;
                }
                res.push_back(mat[i][j]);
                count++;
            }
            currPos = DOWN;
        } else {
            break;
        }
    }

    return res;

}
