Stacks

1. Min max Stack

write MinMaxStack class for a min max stack.
1. push to and pop from stack
2. peeking the value from stack
3. getting both minimum and maximum from stack at the same time.

All APIS -> O(1) and O(1)
1. use stacks  ->
2. getMin()    ->
3. getMax()    ->

heap and stacks

Min ->
      MinHeap -> heap

Max ->
      MaxHeap.  -> heap

DS ->
1. vector<>  -> push_back(), pop_back()   -> insert or remove -> O(1)
2. heap() -> priority_queue +  priority_queue   -> insert or remove -> not O(1)
3. unorder_map<string, number> - track minimum till now   > vector<unorder_map<string, number>>

5 => min => 5, max=> 5
4 => min -> 4, max => 5 (this will be appended) -> [(min 4), (max 5), (min 5), (max 5)]
....



class MinMaxStack {
    vector<int> stack = {};
    vector<unorder_map<string, number>> minmaxstack = {};

public:
  int peek() {
    return stack[stack.size()- 1];
  }

  int pop() {
      int ret = stack.top();
      minmaxstack.pop_back();
      stack.pop_back();
      return ret;
  }

  void push(int number) {
        stack.push_back(number);

        unorder_map<string, number> newMinMax =  {{"min", number}, {"max", number}};
        if (minmaxstack.size() > 0) {
            unorder_map<string, number> lastMinMax = minmaxstack[minmaxstack.size() - 1];
                newMinMax["Min"] = min(lastMinMax["Min"], number);
                newMinMax["Max"] = max(lastMinMax["Max"], number);
        }
        minmaxstack.push_back(newMinMax);
  }

  int getMin() {
    unorder_map<string, integer> min =  minmaxstack[minmaxstack() - 1];
    return min["Min"];
  }

  int getMax() {
    unorder_map<string, integer> max =  minmaxstack[minmaxstack() - 1];
    return min["Max"];
  }
};



2. Balanced brackets

Takes a string and returns if the brackets are balanced in the string.
Input -> ([])(){}(())()()
Output -> yes

brackets can't overlap -> [(])

/*
  if string is any of [, {, (    -> push
  if string is any of ], }, )    -> if (top == string )-> pop
  if (stack is empty ) -> we have balanced brackets.
*/

bool balancedBrackets(string str) {
   stack<char> brackets = {};
    bool ret = true;
    bool debugLog = false;


    for (auto &ch:str) {
        if ((ch == '[') || (ch == '{') || (ch == '('))  {
            brackets.push(ch);
        } else if ((ch == ']') || (ch == '}') || (ch == ')')) {
            if (debugLog) {
                cout << "Stack Top:" << brackets.top() << "Bracket :" << ch << endl;
            }
					  if (brackets.empty()) {
							return false;
						}
            if (((brackets.top() == '[') && (ch == ']' )) ||
								((brackets.top() == '{') && (ch == '}' ))  ||
								((brackets.top() == '(') && (ch == ')' ))) {
                brackets.pop();
            } else {
							return false;
						}
        } else {
            /* nothing to do */
        }
    }

    if (brackets.empty()) {
        ret = true;
    } else {
        ret = false;
    }

    return ret;
}

void
test_balancedBrackets() {
    string str = "([])(){}(())()()";
    bool ret = balancedBrackets(str);

    cout << "Input" << endl;
    cout << str;
    cout << "Output " << endl;
    if (ret == true) {
        cout << "Brackets are balanced in string: " << str << endl;
    } else {
        cout << "Brackets are not balanced in string: " << str << endl;
    }
}

-----------------------------------------------------------------
Largest Rectangle problem


Write a function that takes an array of positive integer representing height of adjacent building and returns area of largest rectangle that can be created by adjacent buildings, including just
one building. All the buildings have same width (w = 1)

Input -> buildings [1, 3, 3, 2, 4, 1, 5, 3, 2]
answer -> 9

Psuedo code
Insert heights in array.
global_area

After Every insertion at top
   height of top of element -> H
   curr area = H * 1;
   W = 1

   while (array is not empty -> i = 0 to array.size) {
       a = min(height, minimum(0, i)) * (w + i) ;
       curr_area = max(a, curr_area);
       global_area =  max (curr_area, global_area)
   }

return global_area.



int findMin(vector<int> arr, int idx) {
    int min = INT_MAX;
    for (int i = (arr.size() - 1), i >= idx; i--) {
        if (data < min) {
            min = data;
        }
    }
    return min;
}

int findMax(int a, int b, int c) {
    int max;
}

int largestRectangleUnderSkyline(vector<int> buildings) {
    int global_area = -1 ;
    vector<int> Heights;
    Heights.push_back(building[0]);
    int curr_area;
    int i = 1;
    int area = 0;
    global_area  = buildings[0];
    int tillNow = 0;
    for (int i = 1; i < building.size(); i++) {
        local_area = buildings[i];
        area = findMin(Heights, tillNow) * (i + 1);
        area = max(local_area, area);
        if (global_area > area) {
            global_area = area;
        }
        Heights.push_back(Height);
        tillNow tillNow + 1;
    }
    return global_area;
}




-------------------------------------------
Sunset View

A building can be seen in sunset if  its strictly taller than all the buildings after it in the direction of sunset.

Given height Array and direction of sunset , output the indices of building that can see the sunset.

building = [3, 5, 4, 4, 3, 1, 3, 2 ]
Direction = "EAST"
Answer [1, 3, 6, 7]

building = [3, 5, 4, 4, 3, 1, 3, 2 ]
Direction = "WEST"
-> 3, 5
Answer [0, 1]



WEST  -> RightWard (right)
EAST  -> leftward  (left)

-> First building facing the suset will be able to see.
-> as I go (left/right), if the previous building (maxTillNow) is smaller then it will be seen ow not
Keep MaxTillNow


vector<int>
sunsetViews(vector<int> buildings, string direction) {
    vector<int> output = {};

    if (buildings.size() == 0 ) {
        return output;
    }

    if (buildings.size() == 1) {
        output.push_back(0);
        return output;
    }

    maxTillNow = buildings[0];
    output.push_back(0);
    if (direction == "WEST") {
        maxTillNow = buildings[0];
        output.push_back(0);

        for (int idx = 1; idx < buildings.size(); idx++) {
            if (buildings[idx] > maxTillNow) {
                output.push_back(idx);
                maxTillNow = buildings[idx];
            }
        }
    } else if (direction == "EAST") {
        maxTillNow = buildings[buildings.size() - 1];
        for (int idx = buildings.size() - 2; idx >= 0; idx--) {
            if (buildings[idx] > maxTillNow) {
                maxTillNow = buildings[idx];
                output.push_back(idx);
            }
        }
        reverse(output.begin(), output.end());
    } else {
        // do nothing
    }

    return output;
}

-------------------------------------------------------
Write a function to find next greater element.
Given a array and output an array consisting of element where each elemnet is replaced with next greater element.

Input - > 2, 5, -3, -4, 6, 7, 2
Output -> 5, 6, 6, 6, 7, -1, 5

keep a stack to account for the current lowest number. Stack will have indices.
As we interatet the array, we compare the data with stack top.
if stack top is greater, then we place the data in stack
if stack top is smaller, we replace the indices corresponding to array with element till the value at indices is smaller than data.
At the end, we find what everleft in array and iterate over the array to find next greater.

vector<int>
nextGreaterElement(vector<int> array) {

  // stack containing indices of the element whose next greater is to find
  stack<int> S = {};
  vector<int> output(array.size(), -1);
  int top, curr, max;

  if (array.size() == 0) {
      return {};
  }

  if (array.size() == 1) {
      return output;
  }

  // we place only  indices in the stack, as its next greater is to find
  S.push(0);
  max = array[0];

  for (int i = 1; i < array.size(); i++) {
      STop = S.top();

      if (max < array[i]) {
          max = array[i];
      }

      // if top is greater then curr, then simply push to stack
      if (array[sTop] > array[i]) {
          S.push(i);
      } else {  // Top is smaller than curr, then we need to pop till we find top of stack is greater and then push.
        while (array[sTop]  < array[i]) {
            S.pop();
            output[sTop] = array[i];
            sTop = S.top();
        }
        S.push(i);
      }
  }

  while (!S.empty()) {
      sTop = S.top();
      // if the element is largest, no greater exist, (replace with - 1)
      if (array[sTop] == max) {
          output[sTop] = -1
      } else { //we need to find greater than it in array
          curr = array[0];
          for (auto &data:array) {
                if ((data > array[sTop]) && (data <= curr)) {
                    curr = data;
                }
          }
          array[sTop] = curr;
      }
      S.pop();
      sTop = S.top();
  }

  return output;
}


---------------------------------------------------------------
Sort Stack ->

Write a function that sort the stack in place.
Use vector for stack (c++) -> pop_back() and push_back()
and use recursion.
-----
Stack -> <Input >   -5, 2, -2, 4, 3, 1
Stack -> <Output>  -5, -2, 1, 2, 3, 4
-----

1
Time -> O(n^2) and O(n)
Operation to be used -> pop_back and push_back
Algorithm -> Recursion to be used.

-> Input Stack -> I
-> keep one output stack(O).
-> while (I is not empty) {
        data = I.top();
        I.pop();
        function(O, data);
    }
function(O, data) {
 // Aim is to keep larger at top.
 -> if (O.empty()) {
     O.push(data);
     return;
    }
-> if (O.top() < data ) { // data is more then the top ->
        O.push(data) -> push the data top to O.
        return;
    }
-> if (O->top >= data) { ///inplace
        temp = O.top();
        O.pop();
        function(O, top) //call the function with O, data ;
        O.push(temp);
    }
}



#include <vector>
using namespace std;


void
sortStackHelper(vector<int> &output, int data) {
    if (output.empty()) {  // output stack is empty (either we encounter first input or data is lowest till now )
        output.push_back(data);
        return;
    }
    if (output.top() < data) {  // data is more then the top of output stack,we found next greatest.
        output.push(data);
        return;
    }

    if (output.top >= data) {   // our data is smaller and we need to place it to appropriate place in stack . (inplace )
        temp = output.top();
        output.pop();
        sortStackHelper(output, data);
        O.push(temp);
        return;
    }
}

vector<int>
sortStack(vector<int> &stack) {
 if (stack.size() == 0) {
  return {};
 }

 if (stack.size() == 1) {
     return stack;
 }

 vector<int> output = {};
 while (!stack.empty()) {
     data = stack.top();
     stack.pop();
     sortStackHelper(output, data);
 }
}


1 3 4

4 3 1 -1
-1 1 3 4






#include <vector>
using namespace std;

vector<int> sortStack(vector<int> &stack) {
  // Write your code here.
  return {};
}





