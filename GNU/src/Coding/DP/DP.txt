Dynamic Programming

1. Largest Sum Array

Given an array, find the largest subarray which has maximum sum

Input  -> -4,2,-5,1,2,3,6,-5,1
Output -> 1,2,3,6

RunTime -> O(N)
Space -> O(1)


int find_max_sum(int[] arr, int n) {
    if (n < 1) {
        return 0;
    }

    int curr_sum = A[0];
    int global_sum = A[0];
    int start, end;

    for (int i = 1; i < n; i++) {
        if (curr_sum < 0) {
            curr_sum = A[i];
            start = i;
        } else {
            curr_sum = curr_sum + A[i];
        }

        if (global_sum > curr_sum) {
            global_sum = curr_sum;
            end = i;
        }
    }

    return global_sum;
}



2. Maximum subsequence -> Non Adjacent Element

Find an efficient algorithm to find the maximum sum of a subsequence in an array so that no consecutive elements are part of this subsequence.



Logic ->
We need to find the max of (curr + arr[i-2], max, arr[i-1]) for each i . That way we will find the maximum

max[i-1] -> max (max[i-1], arr[i])

max[i] = max(max[i-1], arr[i-2] + arr[i] )



input ->     1,6 ,10,14,-5,-1,2,-1,3
maxSum -> 25  -> 6, 14, 2, 3

input -> 1, -1, 6, -4, 2, 2
maxSum -> 9  -> 1, 6, 2

if (array.size() == 0) {
    return 0;
}

if (array.size() == 1) {
    return array[0];
}

vector<int>results(array.size(), 0);
result[0 ]= array[0];
for (int i = 1; i < array.size(); i++) {

    result[i] = max(result[i-1], array[i]);

    if ((i - 2) >= 0) {
        result[i] = max(result[i], result[i-2] + arr[i]);
    }

}
result[array.size()-1];




3. Find Combinations for Game Scoring









4. Coin Change
